---
# A list of ZenML deployments, either local or remote (external), that
# can be included in test environments to be used to run automated tests or
# passed to pytest directly using the `--deployment` command line argument.
#
# Local deployments are provisioned by the test framework on the fly in the test
# preparation phase, and are torn down after the tests have finished. Remote
# deployments are assumed to be already provisioned and ready to use.
#
# A deployment has the following properties:
#
# - name: The name of the deployment. This is used to refer to the deployment
#   in test environments and in the test framework CLI. It is also used to
#   generate unique names for resources that may need to be deployed locally.
# - server: The method used to deploy the ZenML server used in the tests. It can
#   take one of the following values:
#   -  none: A deployment that uses a local client that is not connected to
#      any ZenML Server. The client connects directly to a database, which is
#      either local or remote.
#   -  local: A deployment that uses a ZenML server running locally as a
#      daemon process (similar to running `zenml up`). The test framework takes
#      care of starting and stopping the server process.
#   -  docker: A deployment that uses a ZenML server running locally as a
#      docker container (similar to running `zenml up --docker`). The test
#      framework takes care of starting and stopping the server container. It
#      also takes care of building and using a `zenml-server` Docker image with
#      the latest code available in the local zenml code repository clone.
#      When used with a dockerized database server like MySQL or MariaDB, the
#      test framework uses Docker Compose to start and stop both containers.
#   -  external: A deployment that uses a ZenML server running remotely. The
#      test framework will not provision or manage this server.
#      The test framework will only connect to the server and run tests against
#      it. A `config` section must be provided in the deployment configuration
#      to specify the connection details.
# - database: The type of database used by the deployment. It can take one of
#   the following values:
#   -  sqlite: Indicates that the default SQLite database is used. For `local`
#      and `docker` server deployments, this is equivalent to deploying the
#      ZenML server with `zenml up` or `zenml up --docker`.
#   -  mysql: Uses a MySQL database server running locally as a Docker
#      container.
#   -  mariadb: Uses a MariaDB database server running locally as a Docker
#      container.
#   -  external: A 3rd party ZenML server that is installed and maintained
#      externally. The test framework will not provision or manage this server.
#      The test framework will only connect to the server and run tests against
#      it. A `config` section must be provided in the deployment configuration
#      to specify the connection details.
# - config: A dictionary of configuration parameters that are used to initialize
#   the ZenML store to connect to a remote ZenML server or database. The values
#   may reference secrets that are defined in the test configuration or as
#   environment variables using the `{{SECRET_NAME_OR_ENV_VAR}}` syntax.
# - disabled: A boolean flag that can be used to administratively disable a
#   deployment. A disabled deployment will not be checked for operational
#   readiness and will not be usable to run tests. This is useful to temporarily
#   disable a deployment that is not operational without having to remove it
#   from the configuration.
# - capabilities: A list of custom capabilities that the deployment supports or
#   does not support. This is compared against the capabilities required by the
#   tests to determine if the deployment is suitable to run the tests. A `true`
#   value indicates that the deployment supports the capability, while a `false`
#   value indicates that it doesn't.
#
deployments:
  - name: default
    description: >-
      Default deployment.
    server: none
    database: sqlite
  - name: client-mysql
    description: >-
      Local client connected directly to MySQL running in container.
    server: none
    database: mysql
  - name: client-mariadb
    description: >-
      Local client connected directly to MariaDB running in container.
    server: none
    database: mariadb

    # IMPORTANT: don't use this with pytest auto-provisioning. Running forked
    # daemons in pytest leads to serious issues because the whole test process
    # is forked. As a workaround, the deployment can be started separately,
    # before pytest is invoked.
  - name: local-server
    description: >-
      Local ZenML server running as daemon process using the default SQLite
      database.
    server: local
    database: sqlite
    capabilities:
      server: true
  - name: docker-server
    description: >-
      Local ZenML server running in docker using the default SQLite database.
    server: docker
    database: sqlite
    capabilities:
      server: true
  - name: docker-server-mysql
    description: >-
      Local ZenML server and MySQL both running in docker with docker-compose.
    server: docker
    database: mysql
    capabilities:
      server: true
  - name: docker-server-mariadb
    description: >-
      Local ZenML server and MariaDB both running in docker with docker-compose.
    server: docker
    database: mariadb
    capabilities:
      server: true
